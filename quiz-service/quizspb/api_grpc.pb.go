// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: quizspb/api.proto

package quizspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuizsService_CreateQuiz_FullMethodName    = "/quizspb.QuizsService/CreateQuiz"
	QuizsService_EnableQuiz_FullMethodName    = "/quizspb.QuizsService/EnableQuiz"
	QuizsService_DisableQuiz_FullMethodName   = "/quizspb.QuizsService/DisableQuiz"
	QuizsService_ChangeEmail_FullMethodName   = "/quizspb.QuizsService/ChangeEmail"
	QuizsService_AuthorizeQuiz_FullMethodName = "/quizspb.QuizsService/AuthorizeQuiz"
	QuizsService_GetQuiz_FullMethodName       = "/quizspb.QuizsService/GetQuiz"
)

// QuizsServiceClient is the client API for QuizsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizsServiceClient interface {
	CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error)
	EnableQuiz(ctx context.Context, in *EnableQuizRequest, opts ...grpc.CallOption) (*EnableQuizResponse, error)
	DisableQuiz(ctx context.Context, in *DisableQuizRequest, opts ...grpc.CallOption) (*DisableQuizResponse, error)
	ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error)
	AuthorizeQuiz(ctx context.Context, in *AuthorizeQuizRequest, opts ...grpc.CallOption) (*AuthorizeQuizResponse, error)
	GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error)
}

type quizsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizsServiceClient(cc grpc.ClientConnInterface) QuizsServiceClient {
	return &quizsServiceClient{cc}
}

func (c *quizsServiceClient) CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error) {
	out := new(CreateQuizResponse)
	err := c.cc.Invoke(ctx, QuizsService_CreateQuiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizsServiceClient) EnableQuiz(ctx context.Context, in *EnableQuizRequest, opts ...grpc.CallOption) (*EnableQuizResponse, error) {
	out := new(EnableQuizResponse)
	err := c.cc.Invoke(ctx, QuizsService_EnableQuiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizsServiceClient) DisableQuiz(ctx context.Context, in *DisableQuizRequest, opts ...grpc.CallOption) (*DisableQuizResponse, error) {
	out := new(DisableQuizResponse)
	err := c.cc.Invoke(ctx, QuizsService_DisableQuiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizsServiceClient) ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error) {
	out := new(ChangeEmailResponse)
	err := c.cc.Invoke(ctx, QuizsService_ChangeEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizsServiceClient) AuthorizeQuiz(ctx context.Context, in *AuthorizeQuizRequest, opts ...grpc.CallOption) (*AuthorizeQuizResponse, error) {
	out := new(AuthorizeQuizResponse)
	err := c.cc.Invoke(ctx, QuizsService_AuthorizeQuiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizsServiceClient) GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error) {
	out := new(GetQuizResponse)
	err := c.cc.Invoke(ctx, QuizsService_GetQuiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizsServiceServer is the server API for QuizsService service.
// All implementations must embed UnimplementedQuizsServiceServer
// for forward compatibility
type QuizsServiceServer interface {
	CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error)
	EnableQuiz(context.Context, *EnableQuizRequest) (*EnableQuizResponse, error)
	DisableQuiz(context.Context, *DisableQuizRequest) (*DisableQuizResponse, error)
	ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error)
	AuthorizeQuiz(context.Context, *AuthorizeQuizRequest) (*AuthorizeQuizResponse, error)
	GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error)
	mustEmbedUnimplementedQuizsServiceServer()
}

// UnimplementedQuizsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuizsServiceServer struct {
}

func (UnimplementedQuizsServiceServer) CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuiz not implemented")
}
func (UnimplementedQuizsServiceServer) EnableQuiz(context.Context, *EnableQuizRequest) (*EnableQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableQuiz not implemented")
}
func (UnimplementedQuizsServiceServer) DisableQuiz(context.Context, *DisableQuizRequest) (*DisableQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableQuiz not implemented")
}
func (UnimplementedQuizsServiceServer) ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedQuizsServiceServer) AuthorizeQuiz(context.Context, *AuthorizeQuizRequest) (*AuthorizeQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeQuiz not implemented")
}
func (UnimplementedQuizsServiceServer) GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuiz not implemented")
}
func (UnimplementedQuizsServiceServer) mustEmbedUnimplementedQuizsServiceServer() {}

// UnsafeQuizsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizsServiceServer will
// result in compilation errors.
type UnsafeQuizsServiceServer interface {
	mustEmbedUnimplementedQuizsServiceServer()
}

func RegisterQuizsServiceServer(s grpc.ServiceRegistrar, srv QuizsServiceServer) {
	s.RegisterService(&QuizsService_ServiceDesc, srv)
}

func _QuizsService_CreateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizsServiceServer).CreateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizsService_CreateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizsServiceServer).CreateQuiz(ctx, req.(*CreateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizsService_EnableQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizsServiceServer).EnableQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizsService_EnableQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizsServiceServer).EnableQuiz(ctx, req.(*EnableQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizsService_DisableQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizsServiceServer).DisableQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizsService_DisableQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizsServiceServer).DisableQuiz(ctx, req.(*DisableQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizsService_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizsServiceServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizsService_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizsServiceServer).ChangeEmail(ctx, req.(*ChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizsService_AuthorizeQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizsServiceServer).AuthorizeQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizsService_AuthorizeQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizsServiceServer).AuthorizeQuiz(ctx, req.(*AuthorizeQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizsService_GetQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizsServiceServer).GetQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizsService_GetQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizsServiceServer).GetQuiz(ctx, req.(*GetQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizsService_ServiceDesc is the grpc.ServiceDesc for QuizsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quizspb.QuizsService",
	HandlerType: (*QuizsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuiz",
			Handler:    _QuizsService_CreateQuiz_Handler,
		},
		{
			MethodName: "EnableQuiz",
			Handler:    _QuizsService_EnableQuiz_Handler,
		},
		{
			MethodName: "DisableQuiz",
			Handler:    _QuizsService_DisableQuiz_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _QuizsService_ChangeEmail_Handler,
		},
		{
			MethodName: "AuthorizeQuiz",
			Handler:    _QuizsService_AuthorizeQuiz_Handler,
		},
		{
			MethodName: "GetQuiz",
			Handler:    _QuizsService_GetQuiz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quizspb/api.proto",
}
