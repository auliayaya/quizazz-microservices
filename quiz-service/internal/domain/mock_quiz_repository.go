// Code generated by mockery v2.42.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQuizRepository is an autogenerated mock type for the QuizRepository type
type MockQuizRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, quizID
func (_m *MockQuizRepository) Find(ctx context.Context, quizID string) (*Quiz, error) {
	ret := _m.Called(ctx, quizID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *Quiz
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Quiz, error)); ok {
		return rf(ctx, quizID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Quiz); ok {
		r0 = rf(ctx, quizID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Quiz)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, quizID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, quiz
func (_m *MockQuizRepository) Save(ctx context.Context, quiz *Quiz) error {
	ret := _m.Called(ctx, quiz)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Quiz) error); ok {
		r0 = rf(ctx, quiz)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, quiz
func (_m *MockQuizRepository) Update(ctx context.Context, quiz *Quiz) error {
	ret := _m.Called(ctx, quiz)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Quiz) error); ok {
		r0 = rf(ctx, quiz)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockQuizRepository creates a new instance of MockQuizRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuizRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuizRepository {
	mock := &MockQuizRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
