// Code generated by go-swagger; DO NOT EDIT.

package quiz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"quizazz/quiz-service/quizsclient/models"
)

// NewDisableQuizParams creates a new DisableQuizParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDisableQuizParams() *DisableQuizParams {
	return &DisableQuizParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDisableQuizParamsWithTimeout creates a new DisableQuizParams object
// with the ability to set a timeout on a request.
func NewDisableQuizParamsWithTimeout(timeout time.Duration) *DisableQuizParams {
	return &DisableQuizParams{
		timeout: timeout,
	}
}

// NewDisableQuizParamsWithContext creates a new DisableQuizParams object
// with the ability to set a context for a request.
func NewDisableQuizParamsWithContext(ctx context.Context) *DisableQuizParams {
	return &DisableQuizParams{
		Context: ctx,
	}
}

// NewDisableQuizParamsWithHTTPClient creates a new DisableQuizParams object
// with the ability to set a custom HTTPClient for a request.
func NewDisableQuizParamsWithHTTPClient(client *http.Client) *DisableQuizParams {
	return &DisableQuizParams{
		HTTPClient: client,
	}
}

/*
DisableQuizParams contains all the parameters to send to the API endpoint

	for the disable quiz operation.

	Typically these are written to a http.Request.
*/
type DisableQuizParams struct {

	// Body.
	Body models.QuizsServiceDisableQuizBody

	// ID.
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the disable quiz params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DisableQuizParams) WithDefaults() *DisableQuizParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the disable quiz params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DisableQuizParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the disable quiz params
func (o *DisableQuizParams) WithTimeout(timeout time.Duration) *DisableQuizParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the disable quiz params
func (o *DisableQuizParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the disable quiz params
func (o *DisableQuizParams) WithContext(ctx context.Context) *DisableQuizParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the disable quiz params
func (o *DisableQuizParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the disable quiz params
func (o *DisableQuizParams) WithHTTPClient(client *http.Client) *DisableQuizParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the disable quiz params
func (o *DisableQuizParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the disable quiz params
func (o *DisableQuizParams) WithBody(body models.QuizsServiceDisableQuizBody) *DisableQuizParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the disable quiz params
func (o *DisableQuizParams) SetBody(body models.QuizsServiceDisableQuizBody) {
	o.Body = body
}

// WithID adds the id to the disable quiz params
func (o *DisableQuizParams) WithID(id string) *DisableQuizParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the disable quiz params
func (o *DisableQuizParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *DisableQuizParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
