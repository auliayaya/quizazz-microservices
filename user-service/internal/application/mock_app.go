// Code generated by mockery v2.42.0. DO NOT EDIT.

package application

import (
	context "context"
	domain "quizazz/user-service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockApp is an autogenerated mock type for the App type
type MockApp struct {
	mock.Mock
}

// AuthorizeUser provides a mock function with given fields: ctx, authorize
func (_m *MockApp) AuthorizeUser(ctx context.Context, authorize AuthorizeUser) error {
	ret := _m.Called(ctx, authorize)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AuthorizeUser) error); ok {
		r0 = rf(ctx, authorize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableUser provides a mock function with given fields: ctx, disable
func (_m *MockApp) DisableUser(ctx context.Context, disable DisableUser) error {
	ret := _m.Called(ctx, disable)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DisableUser) error); ok {
		r0 = rf(ctx, disable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableUser provides a mock function with given fields: ctx, enable
func (_m *MockApp) EnableUser(ctx context.Context, enable EnableUser) error {
	ret := _m.Called(ctx, enable)

	if len(ret) == 0 {
		panic("no return value specified for EnableUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, EnableUser) error); ok {
		r0 = rf(ctx, enable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, get
func (_m *MockApp) GetUser(ctx context.Context, get GetUser) (*domain.User, error) {
	ret := _m.Called(ctx, get)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetUser) (*domain.User, error)); ok {
		return rf(ctx, get)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetUser) *domain.User); ok {
		r0 = rf(ctx, get)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetUser) error); ok {
		r1 = rf(ctx, get)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, register
func (_m *MockApp) RegisterUser(ctx context.Context, register RegisterUser) error {
	ret := _m.Called(ctx, register)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, RegisterUser) error); ok {
		r0 = rf(ctx, register)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockApp creates a new instance of MockApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApp {
	mock := &MockApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
